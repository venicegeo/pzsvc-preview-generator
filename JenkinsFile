#!/usr/bin/groovy

node {
  def root = pwd()
  def mvn = tool 'M3'
  def zapHome = tool 'ZAProxy_v2_5_0'
  def nodejs = tool 'NodeJS_6'
  
  stage('Setup') {
    deleteDir()
    // github is open gitlab requires credentials to clone
    if(env.GITLAB_CREDS) {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
    }
  }

  def appvers = sh(script: "git describe --long --tags --always | sed 's/\\./-/'g", returnStdout: true)
  appvers = appvers.trim()
  def appName = "pz-svcs-prevgen-${appvers}"

  stage('Archive') {
    // Build
    sh """
      sed -i 's,\${env.ARTIFACT_STORAGE_URL},${env.ARTIFACT_STORAGE_URL},g' pom.xml
      ${mvn}/bin/mvn clean package -U -Dmaven.repo.local=${root}
      cp ${root}/target/pz-svcs-prevgen-0.0.1-SNAPSHOT.jar ${root}/pz-svcs-prevgen.jar
    """
    // Check if exists already
    def getDependencyStatus = sh(script: """mvn -X --settings ~/.m2/settings.xml dependency:get \
      -Dmaven.repo.local="${root}/.m2/repository" \
      -DrepositoryId=nexus \
      -DartifactId=pz-svcs-prevgen \
      -Dversion=${appvers} \
      -DgroupId="org.venice.piazza" \
      -Dpackaging=jar \
      -DremoteRepositories="nexus::default::${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
    """, returnStatus: true)
    echo "dependency status = ${getDependencyStatus}"
    if (getDependencyStatus == 0) {
      echo "Artifact version ${appvers} exists in Nexus, nothing to do"
    } else {
     sh """mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${root}/pz-svcs-prevgen.jar \
        -DrepositoryId=nexus \
        -Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
        -DgroupId="org.venice.piazza" \
        -DgeneratePom=false \
        -Dpackaging=jar \
        -Dmaven.repo.local="${root}/.m2/repository" \
        -DartifactId=pz-svcs-prevgen \
        -Dversion=${appvers}
      """
    }
  }

  if(!params.SKIP_SCANS) {
	  stage('Scans') {
		withCredentials([[$class: "StringBinding", credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]]) {
		  sh "/jslave/dependency-check/dependency-check/bin/dependency-check.sh --version"
		  sh '/jslave/dependency-check/dependency-check/bin/dependency-check.sh --project "pz-svcs-prevgen" --scan "." --format "XML" --enableExperimental --disableBundleAudit'
		  sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"

		  //ionConnect()
		/* TODO - Put back in. Ion connect is not working currently.
		  def ionTool = tool 'ion-connect-latest'
		  withEnv([
			"ION_CONNECT_LATEST_HOME=${ionTool}",
			"PATH+ION=${ionTool}/linux/bin",
			"PATH+JQ=${tool 'jq1_5'}"
		  ]) {
			withCredentials([string(credentialsId: "${env.IONCHANNEL_SECRET_KEY}", variable: 'IONCHANNEL_SECRET_KEY')]) {
			  def pomFile = "${root}/pom.xml"
			  sh """
				resp=\$(ion-connect dependency resolve-dependencies-in-file --flatten --type maven ${pomFile})
				deps=\$(echo \${resp} | jq .dependencies)
				ion-connect vulnerability get-vulnerabilities-for-list "\${deps}"
			  """
			}
		  }*/

		  sh """
			mkdir -p ${root}/.m2/repository
			${mvn}/bin/mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install \
			  -Dmaven.repo.local=${root}/.m2/repository \
			  -Pcoverage-per-test org.jacoco:jacoco-maven-plugin:report \
			  -DdataFile=target/jacoco.exec
		  """

		  //sh "${mvn}/bin/mvn install:install-file -Dmaven.repo.local=${root} -Dfile=pom.xml -DpomFile=pom.xml"
		  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} src/main/java/{*.java,**/*.java}"
		  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx1G -f fortifyResults-${env.BUILD_NUMBER}.fpr"
		  sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr ${env.THREADFIX_URL}/rest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
		}
		
		withCredentials([string(credentialsId: "${env.SONAR_TOKEN}", variable: 'USERNAME')]) {
		  withEnv(["HOME=${root}", "_JAVA_OPTIONS=-Duser.home=${root}"]) {
			def projectId = "venicegeo:piazza:pz-svcs-prevgen"
			sh "${mvn}/bin/mvn sonar:sonar -Dmaven.repo.local=${root} -Dsonar.host.url=${env.SONAR_URL} -Dsonar.projectKey=${projectId} -Dsonar.projectName=${projectId} -Dsonar.login=${USERNAME} -P nga"
		  }
		}
	  }

	  stage("Security Scan Pass/Fail") {
		// Query threadfix and block if any highs/crits are found
		/*
		sh "mkdir -p sspf-pkg"
		dir("./sspf-pkg") {
		  withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
			sh "curl -L ${env.SSPF_PACKAGE} -o sspf.zip"
			sh "unzip sspf.zip"
			dir("./sspf-master/sspf") {
			  sh "/bin/curl --fail --silent ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}?apiKey=${THREADFIX_KEY} | ./sspf.py"
			}
		  }
		}*/
	  }  
  }
  
  stage ('Int Deploy') {
    if(!fileExists('.cf')) {
      sh "mkdir -p .cf"
    }
    withEnv(['CF_HOME=.cf']) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}"
        sh "cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -b ${env.JAVA_BUILDPACK_NAME} -d ${env.PHASE_ONE_PCF_DOMAIN} --no-start"
        sh "cf set-env ${appName} SPACE ${env.PHASE_ONE_PCF_SPACE}"
        sh "cf set-env ${appName} DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}"

        try {
          sh "cf start ${appName}"
        } catch (Exception e) {
          //sh "cf logs --recent ${appName}"
          sh "cf delete ${appName} -f -r"
          error("Error during application start. Deleting ${appName} and failing the build.")
        }
      }
    }
	if(!params.SKIP_SCANS) {
		withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
		  sh "mkdir -p ${root}/zap-out"
		  sh """${zapHome}/zap.sh -cmd \
			-quickout ${root}/zap-out/zap.xml \
			-quickurl https://${appName}.${env.PHASE_ONE_PCF_DOMAIN} \
		  """
		  sh "cat ${root}/zap-out/zap.xml"
		  sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
		}
	}
    withEnv(['CF_HOME=.cf']) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}"
        def legacyAppNames = sh(script: "cf routes | grep \"pz-svcs-prevgen \" | awk '{print \$4}'", returnStdout: true)
        sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname pz-svcs-prevgen"
        // Remove Legacy applications
        for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
          def legacyAppName = legacyApp.toString().trim()
          if (legacyAppName != appName) {
            sh "cf unmap-route ${legacyAppName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname pz-svcs-prevgen"
            sh "cf delete -f ${legacyAppName} -r"
          }
        }
      }
    }
  }


  // Phase one tests do not test preview generator. No need to run those here.


  if(params.DEPLOY_PHASE_TWO) {
    stage('Stage Deploy') {
      if(!fileExists('.cf')) {
        sh "mkdir -p .cf"
      }
      withEnv(['CF_HOME=.cf']) {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}"
        sh "cf push ${appName} --hostname ${appName} -f manifest.jenkins.yml -b ${env.JAVA_BUILDPACK_NAME} -d ${env.PHASE_TWO_PCF_DOMAIN} --no-start"
        sh "cf set-env ${appName} SPACE ${env.PHASE_TWO_PCF_SPACE}"
        sh "cf set-env ${appName} DOMAIN ${env.PHASE_TWO_PCF_DOMAIN}"

        try {
          sh "cf start ${appName}"
        } catch (Exception e) {
          //sh "cf logs --recent ${appName}"
          sh "cf delete ${appName} -f -r"
          error("Error during application start. Deleting ${appName} and failing the build.")
        }
        }
      }
	  if(!params.SKIP_SCANS) {
		  withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
			sh """${zapHome}/zap.sh -cmd \
			-quickout ${root}/zap-out/zap.xml \
			-quickurl https://${appName}.${env.PHASE_TWO_PCF_DOMAIN} \
			"""
			sh "cat ${root}/zap-out/zap.xml"
			sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
		  }
	  }
      withEnv(['CF_HOME=.cf']) {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}"
        def legacyAppNames = sh(script: "cf routes | grep \"pz-svcs-prevgen \" | awk '{print \$4}'", returnStdout: true)
        sh "cf map-route ${appName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname pz-svcs-prevgen"
          // Remove Legacy applications
          for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
            def legacyAppName = legacyApp.toString().trim()
            if (legacyAppName != appName) {
              sh "cf unmap-route ${legacyAppName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname pz-svcs-prevgen"
              sh "cf delete -f ${legacyAppName} -r"
            }
          }
        }
      }
    }

    if (!params.SKIP_INTEGRATION_TESTS) {
      stage('Phase Two Integration Tests') {
        if(!fileExists("integration-tests")) {
          sh "mkdir -p integration-tests"
        }
        withCredentials([file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: 'POSTMAN_FILE')]) {
          withEnv(["PATH+=${root}/integration-tests/node_modules/newman/bin:${nodejs}/bin", "PCF_SPACE=${env.PHASE_TWO_PCF_SPACE}", "HOME=${WORKSPACE}"]) {
            dir ("integration-tests") {
              if(env.INTEGRATION_GITLAB_CREDS) {
                  git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}", credentialsId: "${env.INTEGRATION_GITLAB_CREDS}"
              } else {
                  git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}"
              }
              sh "npm install newman@2"
              sh "ci/blackbox.sh"
            }
          }
        }
      }
    }


  }
}
